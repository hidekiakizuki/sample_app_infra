# Init process for Fluent Bit on ECS, multi-config support
# https://github.com/aws/aws-for-fluent-bit/tree/mainline/use_cases/init-process-for-fluent-bit

# Fluent Bit FireLens Container Health Check Guidance - Simple Uptime Health Check
# https://github.com/aws-samples/amazon-ecs-firelens-examples/tree/mainline/examples/fluent-bit/health-check#simple-uptime-health-check
# https://github.com/aws-samples/amazon-ecs-firelens-examples/blob/mainline/examples/fluent-bit/health-check/task-definition-uptime-healthcheck.json
#
# Under the hood: FireLens for Amazon ECS Tasks - My experience using FireLens: reliability and recommendations
# https://aws.amazon.com/jp/blogs/containers/under-the-hood-firelens-for-amazon-ecs-tasks/
[SERVICE]
    HTTP_Server On
    HTTP_Listen 0.0.0.0
    HTTP_PORT 2020
    Flush 1
    Grace 30


# ELBヘルスチェック除外
[FILTER]
    Name grep
    Match_Regex ^(?!(error\.|stdout\.|stderr\.)).*-firelens-.*
    Exclude log ^(?=.*ELB-HealthChecker\/2\.0).*$


# Partial Message対応
# ログが16KB毎に分割されるための対応です。
# FireLens Example: Concatenate Partial/Split Container Logs
# https://github.com/aws-samples/amazon-ecs-firelens-examples/tree/mainline/examples/fluent-bit/filter-multiline-partial-message-mode
[FILTER]
    Name multiline
    Match_Regex ^(?!(error\.|stdout\.|stderr\.)).*-firelens-.*
    multiline.key_content log
    mode partial_message


# パース
# nginxのアクセスログ、エラーログのパース処理を分けて処理したいためにタグを付与します。
[FILTER]
    Name rewrite_tag
    Match ${CONTAINER_NAME_WEB_SERVER}-firelens-*
    Rule $source ^stdout$ stdout.$TAG false
    Rule $source ^stderr$ stderr.$TAG false

[FILTER]
    Name parser
    Match stdout.${CONTAINER_NAME_WEB_SERVER}-firelens-*
    Key_Name log
    Parser nginx_access_custom
    Preserve_Key False
    Reserve_Data True

[FILTER]
    Name parser
    Match stderr.${CONTAINER_NAME_WEB_SERVER}-firelens-*
    Key_Name log
    Parser nginx_error_custom
    Preserve_Key False
    Reserve_Data True

[FILTER]
    Name parser
    Match ${CONTAINER_NAME_WEB_APP}-firelens-*
    Key_Name log
    Parser web_app
    Preserve_Key False
    Reserve_Data True


# kinesis_firehoseプラグインで挿入するtimeとは別に生ログのtimeをoriginal_timeキーとしてリネームして保持します。
[FILTER]
    Name modify
    Match *
    Rename time original_time

[FILTER]
    Name modify
    Match *
    Rename log message

# エラーログはCloudWatch Logsにも送信したいためにタグを付与します。
[FILTER]
    Name rewrite_tag
    Match_Regex ^(stdout|stderr)\.${CONTAINER_NAME_WEB_SERVER}-firelens-.*
    Rule $source ^stderr$ error.$TAG false
    Rule $code ^[4-5]\d{2}$ error.$TAG false

[FILTER]
    Name rewrite_tag
    Match ${CONTAINER_NAME_WEB_APP}-firelens-*
    Rule $source ^stderr$ error.$TAG false
    Rule $level (ANY|FATAL|ERROR) error.$TAG false


# How to use ECS Task Metadata in Fluent Bit config?
# https://github.com/aws/aws-for-fluent-bit/tree/mainline/use_cases/init-process-for-fluent-bit#how-to-use-ecs-task-metadata-in-fluent-bit-config
# 出力
[OUTPUT]
    Name cloudwatch_logs
    Match error.*
    region ${AWS_REGION}
    log_group_name ${CLOUD_WATCH_LOG_GROUP_ECS_CONTAINER_ERROR_LOGS}
    log_stream_prefix ${ECS_FAMILY}-

[OUTPUT]
    Name kinesis_firehose
    Match *${CONTAINER_NAME_WEB_APP}-firelens-*
    delivery_stream ${FIREHOSE_DELIVERY_STREAM_WEB_APP}
    region ${AWS_REGION}
    time_key time
    time_key_format %Y-%m-%dT%H:%M:%S.%3N%z

[OUTPUT]
    Name kinesis_firehose
    Match *${CONTAINER_NAME_WEB_SERVER}-firelens-*
    delivery_stream ${FIREHOSE_DELIVERY_STREAM_WEB_SERVER}
    region ${AWS_REGION}
    time_key time
    time_key_format %Y-%m-%dT%H:%M:%S%z
